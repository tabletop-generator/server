name: CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  lint:
    name: Prettier Check & ESLint
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [lts/iron]

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"

      - name: Install node dependencies
        run: npm ci

      - name: Run Prettier
        run: npx prettier --check .

      - name: Run ESLint
        run: npm run lint

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [lts/iron]

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"

      - name: Install dependencies and run tests
        run: npm install-ci-test

  # Lint our Dockerfile using Hadolint
  dockerfile-lint:
    name: Dockerfile Lint
    runs-on: ubuntu-latest
    steps:
      # https://github.com/marketplace/actions/hadolint-action
      - uses: actions/checkout@v4
      - uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [lts/iron]

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"

      - name: Install node dependencies
        # NOTE: we need to install dev dependencies too vs. production only for hurl
        run: npm install

      - name: Build Containers
        run: docker compose -f docker-compose.ci.yml up -d

      - name: Wait for Core Services to be Healthy
        run: |
          services=(ttg-server ttg-postgres ttg-minio)
          for service in "${services[@]}"; do
            echo "Waiting for $service to be healthy..."
            until [ "`docker inspect -f {{.State.Health.Status}} $service`" == "healthy" ]; do
              sleep 5;
            done
          done
          echo "All core services are healthy!"

      - name: Wait for MinIO Bucket Creation
        run: |
          echo "Waiting for MinIO bucket creation to complete..."
          until [ "$(docker inspect -f '{{.State.Status}}' ttg-minio-client)" == "exited" ] && \
                [ "$(docker inspect -f '{{.State.ExitCode}}' ttg-minio-client)" == "0" ]; do
            sleep 2
          done

          # Double check it actually created the bucket by looking at logs
          if ! docker logs ttg-minio-client | grep -q "Bucket created successfully"; then
            echo "Container exited successfully but bucket creation message not found in logs"
            docker logs ttg-minio-client
            exit 1
          fi

          echo "MinIO bucket creation completed successfully"

      - name: Run Hurl Tests
        # Print the logs if the tests fail
        run: npm run test:integration || (docker compose logs; exit 1)

  docker-build:
    name: Build Docker Image
    # Don't bother running this job unless the other four all pass
    needs: [lint, dockerfile-lint, unit-tests, integration-tests]
    runs-on: ubuntu-latest
    steps:
      # Set up buildx for optimal Docker Builds, see:
      # https://github.com/docker/setup-buildx-action
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Build Docker image
      - name: Build and export
        env:
          # Define one for our GCHR Repo
          GHCR_REPO: ghcr.io/${{ github.repository_owner }}/ttg-server
          # Define an Environment Variable with the current git commit's sha
          # Use the `github` context to get this, see:
          # https://docs.github.com/en/actions/learn-github-actions/contexts#github-context
          SHA_TAG: sha-${{ github.sha }}
        uses: docker/build-push-action@v6
        with:
          tags: ${{ env.GHCR_REPO }}:latest,${{ env.GHCR_REPO }}:${{ env.SHA_TAG }},${{ env.GHCR_REPO }}:main
          outputs: type=docker,dest=/tmp/image.tar

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: image
          path: /tmp/image.tar

  ghcr:
    name: Push Docker Image to GitHub Container Registry
    needs: [docker-build]
    # Push only on commits to main i.e. don't push on pull requests
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: image
          path: /tmp

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Load image
        run: |
          docker load --input /tmp/image.tar

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push to GitHub Container Registry
        env:
          GHCR_REPO: ghcr.io/${{ github.repository_owner }}/ttg-server
          SHA_TAG: sha-${{ github.sha }}
        run: |
          docker push ${{ env.GHCR_REPO }}:latest
          docker push ${{ env.GHCR_REPO }}:${{ env.SHA_TAG }}
          docker push ${{ env.GHCR_REPO }}:main
