generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Asset {
  id                Int                 @id @default(autoincrement())
  creator_id        Int
  name              String              @db.VarChar(100)
  description       String?
  visibility        enum_visibility
  created_at        DateTime            @default(now()) @db.Timestamp(6)
  updated_at        DateTime            @default(now()) @db.Timestamp(6)
  is_featured       Boolean             @default(false)
  likes             Int                 @default(0)
  type              enum_asset_type
  image_url         String?
  image_url_expiry  DateTime?           @db.Timestamp(6)
  creator           User                @relation(fields: [creator_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  character         Character?
  comments          Comment[]
  AssetToCollection AssetToCollection[]
}

model Character {
  asset_id    Int                      @id
  race        enum_character_race
  class       enum_character_class
  gender      enum_character_gender
  alignment   enum_character_alignment
  appearance  String?
  personality String?
  background  String?
  abilities   String?
  equipment   String?
  motivation  String?
  pose        String?
  baseAsset   Asset                    @relation(fields: [asset_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model Collection {
  id                Int                 @id @default(autoincrement())
  creator_id        Int
  name              String              @db.VarChar(100)
  description       String?
  created_at        DateTime            @default(now()) @db.Timestamp(6)
  updated_at        DateTime            @default(now()) @db.Timestamp(6)
  visibility        enum_visibility
  creator           User                @relation(fields: [creator_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  AssetToCollection AssetToCollection[]
}

model Comment {
  id         Int      @id @default(autoincrement())
  asset_id   Int
  author_id  Int
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  body       String
  asset      Asset    @relation(fields: [asset_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  author     User     @relation(fields: [author_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model User {
  id                         Int          @id @default(autoincrement())
  hashed_email               String       @unique
  display_name               String       @db.VarChar(100)
  join_date                  DateTime     @default(now()) @db.Timestamp(6)
  profile_bio                String?
  profile_picture_url        String?
  profile_picture_url_expiry DateTime?    @db.Timestamp(6)
  assets                     Asset[]
  collections                Collection[]
  comments                   Comment[]
}

model AssetToCollection {
  collection_id Int
  asset_id      Int
  Asset         Asset      @relation(fields: [asset_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  Collection    Collection @relation(fields: [collection_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([collection_id, asset_id])
  @@map("_AssetToCollection")
}

enum enum_asset_type {
  character
  quest
  map
  location
}

enum enum_character_alignment {
  lawful_good
  neutral_good
  chaotic_good
  lawful_neutral
  true_neutral
  chaotic_neutral
  lawful_evil
  neutral_evil
  chaotic_evil
}

enum enum_character_class {
  barbarian
  bard
  cleric
  druid
  fighter
  monk
  paladin
  ranger
  rogue
  sorcerer
  warlock
  wizard
}

enum enum_character_gender {
  male
  female
  non_binary
  genderfluid
  agender
}

enum enum_character_race {
  human
  elf
  drow
  half_elf
  half_orc
  halfling
  dwarf
  gnome
  tiefling
  githyanki
  dragonborn
}

enum enum_visibility {
  public
  private
  unlisted
}
